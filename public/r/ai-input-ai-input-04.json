{
  "name": "ai-input-ai-input-04",
  "type": "registry:component",
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\"\r\n\r\nimport { Send, Mic, Figma, Sparkles, Code, Brain, ChevronRight } from \"lucide-react\"\r\nimport { useState } from \"react\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Textarea } from \"@/components/ui/textarea\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\"\r\n\r\nconst agents = [\r\n  { id: \"creative\", name: \"Creative Writer\", icon: Sparkles, color: \"bg-purple-500\" },\r\n  { id: \"developer\", name: \"Code Assistant\", icon: Code, color: \"bg-blue-500\" },\r\n  { id: \"designer\", name: \"UI Designer\", icon: Figma, color: \"bg-pink-500\" },\r\n  { id: \"analyst\", name: \"Data Analyst\", icon: Brain, color: \"bg-green-500\" },\r\n]\r\n\r\nconst suggestions = [\r\n  { text: \"Create a modern dashboard\", category: \"Design\" },\r\n  { text: \"Build a React component\", category: \"Code\" },\r\n  { text: \"Write engaging copy\", category: \"Content\" },\r\n  { text: \"Analyze user data\", category: \"Analytics\" },\r\n  { text: \"Design a mobile app\", category: \"UI/UX\" },\r\n  { text: \"Optimize performance\", category: \"Technical\" },\r\n]\r\n\r\nexport default function AIInput_04() {\r\n  const { textareaRef, adjustHeight } = useAutoResizeTextarea({\r\n    minHeight: 60,\r\n    maxHeight: 200,\r\n  })\r\n  const [inputValue, setInputValue] = useState(\"\")\r\n  const [selectedAgent, setSelectedAgent] = useState(agents[0])\r\n\r\n  const handleSubmit = () => {\r\n    if (!inputValue.trim()) return\r\n    console.log(\"Submitted to\", selectedAgent.name, \":\", inputValue)\r\n    setInputValue(\"\")\r\n    adjustHeight(true)\r\n  }\r\n\r\n  const handleSuggestionClick = (suggestion: string) => {\r\n    setInputValue(suggestion)\r\n    adjustHeight()\r\n  }\r\n\r\n  const handleAgentSelect = (agent: (typeof agents)[0]) => {\r\n    setSelectedAgent(agent)\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-full max-w-3xl mx-auto p-6\">\r\n      {/* Agent Selection Card */}\r\n      <div className=\"mb-6 bg-card border border-border rounded-2xl p-4 shadow-sm\">\r\n        <div className=\"flex items-center justify-between mb-3\">\r\n          <h3 className=\"text-sm font-medium text-card-foreground\">Select AI Agent</h3>\r\n          <Badge variant=\"secondary\" className=\"bg-accent text-accent-foreground\">\r\n            {selectedAgent.name}\r\n          </Badge>\r\n        </div>\r\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2\">\r\n          {agents.map((agent) => (\r\n            <Button\r\n              key={agent.id}\r\n              variant={selectedAgent.id === agent.id ? \"default\" : \"outline\"}\r\n              size=\"sm\"\r\n              onClick={() => handleAgentSelect(agent)}\r\n              className={cn(\r\n                \"h-12 flex-col gap-1 transition-all duration-200\",\r\n                selectedAgent.id === agent.id && \"bg-primary text-primary-foreground shadow-sm\",\r\n              )}\r\n            >\r\n              <div\r\n                className={cn(\r\n                  \"w-6 h-6 rounded-md flex items-center justify-center\",\r\n                  selectedAgent.id === agent.id ? \"bg-primary-foreground/20\" : agent.color,\r\n                )}\r\n              >\r\n                <agent.icon\r\n                  className={cn(\"w-3 h-3\", selectedAgent.id === agent.id ? \"text-primary-foreground\" : \"text-white\")}\r\n                />\r\n              </div>\r\n              <span className=\"text-xs\">{agent.name.split(\" \")[0]}</span>\r\n            </Button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Main Input Card */}\r\n      <div className=\"bg-card border border-border rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 overflow-hidden\">\r\n        {/* Card Header */}\r\n        <div className=\"px-6 py-4 border-b border-border bg-muted/30\">\r\n          <div className=\"flex items-center gap-3\">\r\n            <div className=\"w-8 h-8 bg-accent rounded-lg flex items-center justify-center\">\r\n              <Figma className=\"w-5 h-5 text-accent-foreground\" />\r\n            </div>\r\n            <div>\r\n              <h2 className=\"text-sm font-medium text-card-foreground\">AI Assistant</h2>\r\n              <p className=\"text-xs text-muted-foreground\">Powered by {selectedAgent.name}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Input Area */}\r\n        <div className=\"relative p-6\">\r\n          <Textarea\r\n            ref={textareaRef}\r\n            placeholder={`Ask ${selectedAgent.name} anything...`}\r\n            className={cn(\r\n              \"border-0 bg-transparent resize-none\",\r\n              \"placeholder:text-muted-foreground\",\r\n              \"focus-visible:ring-0 focus-visible:ring-offset-0\",\r\n              \"px-0 py-0 pr-16\",\r\n              \"min-h-[60px] max-h-[200px]\",\r\n              \"text-sm leading-relaxed\",\r\n            )}\r\n            value={inputValue}\r\n            onChange={(e) => {\r\n              setInputValue(e.target.value)\r\n              adjustHeight()\r\n            }}\r\n            onKeyDown={(e) => {\r\n              if (e.key === \"Enter\" && !e.shiftKey) {\r\n                e.preventDefault()\r\n                handleSubmit()\r\n              }\r\n            }}\r\n          />\r\n\r\n          {/* Action Buttons */}\r\n          <div className=\"absolute right-0 top-0 flex items-center gap-2\">\r\n            <Button variant=\"ghost\" size=\"sm\" className=\"h-9 w-9 p-0 hover:bg-muted rounded-lg\">\r\n              <Mic className=\"w-4 h-4 text-muted-foreground\" />\r\n            </Button>\r\n            <Button\r\n              onClick={handleSubmit}\r\n              disabled={!inputValue.trim()}\r\n              size=\"sm\"\r\n              className={cn(\r\n                \"h-9 w-9 p-0 rounded-lg transition-all duration-200\",\r\n                inputValue.trim()\r\n                  ? \"bg-accent hover:bg-accent/90 text-accent-foreground shadow-sm\"\r\n                  : \"bg-muted text-muted-foreground cursor-not-allowed\",\r\n              )}\r\n            >\r\n              <Send className=\"w-4 h-4\" />\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Suggestion Chips */}\r\n        {!inputValue && (\r\n          <div className=\"px-6 pb-6\">\r\n            <div className=\"flex items-center gap-2 mb-3\">\r\n              <span className=\"text-xs font-medium text-muted-foreground\">Quick suggestions:</span>\r\n              <ChevronRight className=\"w-3 h-3 text-muted-foreground\" />\r\n            </div>\r\n            <div className=\"flex flex-wrap gap-2\">\r\n              {suggestions.map((suggestion, index) => (\r\n                <Button\r\n                  key={index}\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={() => handleSuggestionClick(suggestion.text)}\r\n                  className=\"h-8 text-xs bg-accent/10 hover:bg-accent hover:text-accent-foreground transition-all duration-200 border-accent/20\"\r\n                >\r\n                  <span className=\"text-accent/70 mr-1.5\">{suggestion.category}</span>\r\n                  {suggestion.text}\r\n                </Button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Character Count */}\r\n        {inputValue && (\r\n          <div className=\"px-6 pb-4\">\r\n            <div className=\"text-xs text-muted-foreground text-right\">{inputValue.length} characters</div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "path": "components/componentcraftui/ai-input/ai-input-04.tsx",
      "target": "components/componentcraft/ai-input-04.tsx"
    }
  ],
  "category": "ai-input",
  "subcategory": "component",
  "description": "ai-input-ai-input-04 component"
}