{
  "name": "ai-input-09",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "textarea"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\"\r\n\r\nimport { Send, Mic } from \"lucide-react\"\r\nimport { useState } from \"react\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Textarea } from \"@/components/ui/textarea\"\r\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\"\r\n\r\n// Floating placeholder animation with modern styling\r\nexport default function AIInput_09() {\r\n  const { textareaRef, adjustHeight } = useAutoResizeTextarea({\r\n    minHeight: 60,\r\n    maxHeight: 200,\r\n  })\r\n  const [inputValue, setInputValue] = useState(\"\")\r\n  const [isFocused, setIsFocused] = useState(false)\r\n\r\n  const hasContent = inputValue.length > 0\r\n  const showFloatingLabel = isFocused || hasContent\r\n\r\n  const handleSubmit = () => {\r\n    if (inputValue.trim()) {\r\n      console.log(\"Submitted:\", inputValue)\r\n      setInputValue(\"\")\r\n      adjustHeight(true)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-full py-4\">\r\n      <div className=\"relative max-w-xl w-full mx-auto\">\r\n        <div className=\"relative\">\r\n          <Textarea\r\n            className={cn(\r\n              \"bg-gray-50 dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-2xl\",\r\n              \"pl-4 pr-16 pt-6 pb-4\",\r\n              \"text-gray-900 dark:text-white\",\r\n              \"focus-visible:ring-2 focus-visible:ring-blue-500/20 focus-visible:border-blue-500\",\r\n              \"transition-all duration-200\",\r\n              \"min-h-[60px] max-h-[200px] resize-none overflow-y-auto\",\r\n            )}\r\n            ref={textareaRef}\r\n            value={inputValue}\r\n            onFocus={() => setIsFocused(true)}\r\n            onBlur={() => setIsFocused(false)}\r\n            onChange={(e) => {\r\n              setInputValue(e.target.value)\r\n              adjustHeight()\r\n            }}\r\n            onKeyDown={(e) => {\r\n              if (e.key === \"Enter\" && !e.shiftKey) {\r\n                e.preventDefault()\r\n                handleSubmit()\r\n              }\r\n            }}\r\n          />\r\n\r\n          <label\r\n            className={cn(\r\n              \"absolute left-4 transition-all duration-200 pointer-events-none\",\r\n              \"text-gray-500 dark:text-gray-400\",\r\n              showFloatingLabel ? \"top-2 text-xs font-medium\" : \"top-1/2 -translate-y-1/2 text-base\",\r\n            )}\r\n          >\r\n            Ask me anything...\r\n          </label>\r\n\r\n          <div className=\"absolute right-3 top-1/2 -translate-y-1/2 flex items-center gap-2\">\r\n            <button className=\"p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors\">\r\n              <Mic className=\"w-4 h-4 text-gray-500 dark:text-gray-400\" />\r\n            </button>\r\n\r\n            <button\r\n              onClick={handleSubmit}\r\n              disabled={!inputValue.trim()}\r\n              className={cn(\r\n                \"p-2 rounded-full transition-all\",\r\n                inputValue.trim()\r\n                  ? \"bg-blue-500 text-white hover:bg-blue-600\"\r\n                  : \"bg-gray-200 dark:bg-gray-700 text-gray-400\",\r\n              )}\r\n            >\r\n              <Send className=\"w-4 h-4\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "path": "components/componentcraftui/ai-input/ai-input-09.tsx",
      "target": "components/componentcraft/ai-input-09.tsx"
    },
    {
      "type": "registry:hook",
      "content": "\r\nimport { useEffect, useRef, useCallback } from \"react\";\r\n\r\ninterface UseAutoResizeTextareaProps {\r\n    minHeight: number;\r\n    maxHeight?: number;\r\n}\r\n\r\nexport function useAutoResizeTextarea({\r\n    minHeight,\r\n    maxHeight,\r\n}: UseAutoResizeTextareaProps) {\r\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n    const adjustHeight = useCallback(\r\n        (reset?: boolean) => {\r\n            const textarea = textareaRef.current;\r\n            if (!textarea) return;\r\n\r\n            if (reset) {\r\n                textarea.style.height = `${minHeight}px`;\r\n                return;\r\n            }\r\n\r\n            // Temporarily shrink to get the right scrollHeight\r\n            textarea.style.height = `${minHeight}px`;\r\n\r\n            // Calculate new height\r\n            const newHeight = Math.max(\r\n                minHeight,\r\n                Math.min(\r\n                    textarea.scrollHeight,\r\n                    maxHeight ?? Number.POSITIVE_INFINITY\r\n                )\r\n            );\r\n\r\n            textarea.style.height = `${newHeight}px`;\r\n        },\r\n        [minHeight, maxHeight]\r\n    );\r\n\r\n    useEffect(() => {\r\n        // Set initial height\r\n        const textarea = textareaRef.current;\r\n        if (textarea) {\r\n            textarea.style.height = `${minHeight}px`;\r\n        }\r\n    }, [minHeight]);\r\n\r\n    // Adjust height on window resize\r\n    useEffect(() => {\r\n        const handleResize = () => adjustHeight();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, [adjustHeight]);\r\n\r\n    return { textareaRef, adjustHeight };\r\n}\r\n",
      "path": "hooks/use-auto-resize-textarea.tsx",
      "target": "hooks/use-auto-resize-textarea.tsx"
    },
    {
      "type": "registry:hook",
      "content": "import { useEffect, type RefObject } from \"react\";\n\nexport function useClickOutside(\n    ref: RefObject<HTMLElement>,\n    handler: () => void\n) {\n    useEffect(() => {\n        const handleClickOutside = (event: MouseEvent) => {\n            if (ref.current && !ref.current.contains(event.target as Node)) {\n                handler();\n            }\n        };\n\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () =>\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n    }, [ref, handler]);\n}\n",
      "path": "hooks/use-click-outside.ts",
      "target": "hooks/use-click-outside.ts"
    }
  ]
}