{
  "name": "ai-input-ai-input-07",
  "type": "registry:component",
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\"\r\n\r\nimport { Send, Mic, Square } from \"lucide-react\"\r\nimport { useState } from \"react\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Textarea } from \"@/components/ui/textarea\"\r\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\"\r\n\r\n// Gradient border with animated glow\r\nexport default function AIInput_07() {\r\n  const { textareaRef, adjustHeight } = useAutoResizeTextarea({\r\n    minHeight: 56,\r\n    maxHeight: 200,\r\n  })\r\n  const [inputValue, setInputValue] = useState(\"\")\r\n  const [isProcessing, setIsProcessing] = useState(false)\r\n\r\n  const handleSubmit = () => {\r\n    if (inputValue.trim()) {\r\n      setIsProcessing(true)\r\n      setTimeout(() => setIsProcessing(false), 2000)\r\n      console.log(\"Submitted:\", inputValue)\r\n      setInputValue(\"\")\r\n      adjustHeight(true)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-full py-4\">\r\n      <div className=\"relative max-w-xl w-full mx-auto\">\r\n        <div className=\"relative p-[2px] rounded-2xl bg-gradient-to-r from-pink-500 via-purple-500 to-blue-500 animate-pulse\">\r\n          <div className=\"relative bg-white dark:bg-gray-900 rounded-2xl\">\r\n            <Textarea\r\n              placeholder=\"What's on your mind?\"\r\n              className={cn(\r\n                \"bg-transparent border-none rounded-2xl pl-12 pr-16\",\r\n                \"placeholder:text-gray-500 dark:placeholder:text-gray-400\",\r\n                \"text-gray-900 dark:text-white\",\r\n                \"focus-visible:ring-0 focus-visible:ring-offset-0\",\r\n                \"min-h-[56px] max-h-[200px] resize-none overflow-y-auto\",\r\n              )}\r\n              ref={textareaRef}\r\n              value={inputValue}\r\n              onChange={(e) => {\r\n                setInputValue(e.target.value)\r\n                adjustHeight()\r\n              }}\r\n              onKeyDown={(e) => {\r\n                if (e.key === \"Enter\" && !e.shiftKey) {\r\n                  e.preventDefault()\r\n                  handleSubmit()\r\n                }\r\n              }}\r\n            />\r\n\r\n            <button className=\"absolute left-3 top-1/2 -translate-y-1/2 p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors\">\r\n              <Mic className=\"w-4 h-4 text-gray-600 dark:text-gray-400\" />\r\n            </button>\r\n\r\n            <button\r\n              onClick={handleSubmit}\r\n              disabled={!inputValue.trim() || isProcessing}\r\n              className={cn(\r\n                \"absolute right-3 top-1/2 -translate-y-1/2 p-2 rounded-full transition-all\",\r\n                inputValue.trim() && !isProcessing\r\n                  ? \"bg-gradient-to-r from-pink-500 to-purple-500 text-white hover:scale-105\"\r\n                  : \"bg-gray-200 dark:bg-gray-700 text-gray-400\",\r\n              )}\r\n            >\r\n              {isProcessing ? <Square className=\"w-4 h-4\" /> : <Send className=\"w-4 h-4\" />}\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {inputValue && (\r\n          <div className=\"absolute -bottom-6 right-0 text-xs text-gray-500\">{inputValue.length} characters</div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "path": "components/componentcraftui/ai-input/ai-input-07.tsx",
      "target": "components/componentcraft/ai-input-07.tsx"
    },
    {
      "type": "registry:hook",
      "content": "\r\nimport { useEffect, useRef, useCallback } from \"react\";\r\n\r\ninterface UseAutoResizeTextareaProps {\r\n    minHeight: number;\r\n    maxHeight?: number;\r\n}\r\n\r\nexport function useAutoResizeTextarea({\r\n    minHeight,\r\n    maxHeight,\r\n}: UseAutoResizeTextareaProps) {\r\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n    const adjustHeight = useCallback(\r\n        (reset?: boolean) => {\r\n            const textarea = textareaRef.current;\r\n            if (!textarea) return;\r\n\r\n            if (reset) {\r\n                textarea.style.height = `${minHeight}px`;\r\n                return;\r\n            }\r\n\r\n            // Temporarily shrink to get the right scrollHeight\r\n            textarea.style.height = `${minHeight}px`;\r\n\r\n            // Calculate new height\r\n            const newHeight = Math.max(\r\n                minHeight,\r\n                Math.min(\r\n                    textarea.scrollHeight,\r\n                    maxHeight ?? Number.POSITIVE_INFINITY\r\n                )\r\n            );\r\n\r\n            textarea.style.height = `${newHeight}px`;\r\n        },\r\n        [minHeight, maxHeight]\r\n    );\r\n\r\n    useEffect(() => {\r\n        // Set initial height\r\n        const textarea = textareaRef.current;\r\n        if (textarea) {\r\n            textarea.style.height = `${minHeight}px`;\r\n        }\r\n    }, [minHeight]);\r\n\r\n    // Adjust height on window resize\r\n    useEffect(() => {\r\n        const handleResize = () => adjustHeight();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, [adjustHeight]);\r\n\r\n    return { textareaRef, adjustHeight };\r\n}\r\n",
      "path": "hooks/use-auto-resize-textarea.tsx",
      "target": "hooks/use-auto-resize-textarea.tsx"
    },
    {
      "type": "registry:hook",
      "content": "\r\nimport { useEffect, useRef, useCallback } from \"react\";\r\n\r\ninterface UseAutoResizeTextareaProps {\r\n    minHeight: number;\r\n    maxHeight?: number;\r\n}\r\n\r\nexport function useAutoResizeTextarea({\r\n    minHeight,\r\n    maxHeight,\r\n}: UseAutoResizeTextareaProps) {\r\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n    const adjustHeight = useCallback(\r\n        (reset?: boolean) => {\r\n            const textarea = textareaRef.current;\r\n            if (!textarea) return;\r\n\r\n            if (reset) {\r\n                textarea.style.height = `${minHeight}px`;\r\n                return;\r\n            }\r\n\r\n            // Temporarily shrink to get the right scrollHeight\r\n            textarea.style.height = `${minHeight}px`;\r\n\r\n            // Calculate new height\r\n            const newHeight = Math.max(\r\n                minHeight,\r\n                Math.min(\r\n                    textarea.scrollHeight,\r\n                    maxHeight ?? Number.POSITIVE_INFINITY\r\n                )\r\n            );\r\n\r\n            textarea.style.height = `${newHeight}px`;\r\n        },\r\n        [minHeight, maxHeight]\r\n    );\r\n\r\n    useEffect(() => {\r\n        // Set initial height\r\n        const textarea = textareaRef.current;\r\n        if (textarea) {\r\n            textarea.style.height = `${minHeight}px`;\r\n        }\r\n    }, [minHeight]);\r\n\r\n    // Adjust height on window resize\r\n    useEffect(() => {\r\n        const handleResize = () => adjustHeight();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, [adjustHeight]);\r\n\r\n    return { textareaRef, adjustHeight };\r\n}\r\n",
      "path": "hooks/use-auto-resize-textarea.tsx",
      "target": "hooks/use-auto-resize-textarea.tsx"
    }
  ],
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "textarea"
  ]
}