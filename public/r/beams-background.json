{
  "name": "beams-background",
  "type": "registry:component",
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { useEffect, useRef } from \"react\";\nimport { motion } from \"framer-motion\";\n\ninterface AnimatedGradientBackgroundProps {\n    className?: string;\n    children?: React.ReactNode;\n    intensity?: \"subtle\" | \"medium\" | \"strong\";\n}\n\ninterface Beam {\n    x: number;\n    y: number;\n    width: number;\n    length: number;\n    angle: number;\n    speed: number;\n    opacity: number;\n    hue: number;\n    pulse: number;\n    pulseSpeed: number;\n}\n\ninterface Particle {\n    x: number;\n    y: number;\n    vx: number;\n    vy: number;\n    opacity: number;\n    size: number;\n    hue: number;\n}\n\nfunction createBeam(width: number, height: number): Beam {\n    const angle = -40 + Math.random() * 8;\n    return {\n        x: Math.random() * width * 1.3 - width * 0.15,\n        y: Math.random() * height * 1.3 - height * 0.15,\n        width: 15 + Math.random() * 25,\n        length: height * 2,\n        angle: angle,\n        speed: 0.2 + Math.random() * 0.3,\n        opacity: 0.06 + Math.random() * 0.08,\n        hue: 200 + Math.random() * 80,\n        pulse: Math.random() * Math.PI * 2,\n        pulseSpeed: 0.008 + Math.random() * 0.015,\n    };\n}\n\nfunction createParticle(width: number, height: number): Particle {\n    return {\n        x: Math.random() * width,\n        y: Math.random() * height,\n        vx: (Math.random() - 0.5) * 0.5,\n        vy: (Math.random() - 0.5) * 0.5,\n        opacity: 0.3 + Math.random() * 0.7,\n        size: 0.5 + Math.random() * 1.5,\n        hue: 200 + Math.random() * 60,\n    };\n}\n\nfunction cn(...classes: string[]) {\n    return classes.filter(Boolean).join(' ');\n}\n\nexport default function BeamsBackground({\n    className,\n    intensity = \"medium\",\n}: AnimatedGradientBackgroundProps) {\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const beamsRef = useRef<Beam[]>([]);\n    const particlesRef = useRef<Particle[]>([]);\n    const animationFrameRef = useRef<number>(0);\n    const timeRef = useRef<number>(0);\n\n    const opacityMap = {\n        subtle: 0.5,\n        medium: 0.7,\n        strong: 1,\n    };\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) return;\n\n        const updateCanvasSize = () => {\n            const dpr = window.devicePixelRatio || 1;\n            const w = window.innerWidth;\n            const h = window.innerHeight;\n            \n            canvas.width = w * dpr;\n            canvas.height = h * dpr;\n            canvas.style.width = `${w}px`;\n            canvas.style.height = `${h}px`;\n            ctx.scale(dpr, dpr);\n\n            beamsRef.current = Array.from({ length: 12 }, () => createBeam(w, h));\n            particlesRef.current = Array.from({ length: 80 }, () => createParticle(w, h));\n        };\n\n        updateCanvasSize();\n        window.addEventListener(\"resize\", updateCanvasSize);\n\n        function resetBeam(beam: Beam) {\n            if (!canvas) return beam;\n            const w = canvas.width / (window.devicePixelRatio || 1);\n            const h = canvas.height / (window.devicePixelRatio || 1);\n            \n            beam.y = h + 300;\n            beam.x = Math.random() * w;\n            beam.width = 20 + Math.random() * 30;\n            beam.speed = 0.25 + Math.random() * 0.35;\n            beam.hue = 210 + Math.random() * 70;\n            beam.opacity = 0.08 + Math.random() * 0.1;\n            return beam;\n        }\n\n        function drawBeam(ctx: CanvasRenderingContext2D, beam: Beam, time: number) {\n            ctx.save();\n            ctx.translate(beam.x, beam.y);\n            ctx.rotate((beam.angle * Math.PI) / 180);\n\n            const pulsingOpacity =\n                beam.opacity *\n                (0.85 + Math.sin(beam.pulse + time * 0.001) * 0.15) *\n                opacityMap[intensity];\n\n            const gradient = ctx.createLinearGradient(0, 0, 0, beam.length);\n\n            gradient.addColorStop(0, `hsla(${beam.hue}, 70%, 75%, 0)`);\n            gradient.addColorStop(0.1, `hsla(${beam.hue}, 70%, 75%, ${pulsingOpacity * 0.2})`);\n            gradient.addColorStop(0.3, `hsla(${beam.hue}, 70%, 75%, ${pulsingOpacity * 0.8})`);\n            gradient.addColorStop(0.7, `hsla(${beam.hue}, 70%, 75%, ${pulsingOpacity})`);\n            gradient.addColorStop(0.9, `hsla(${beam.hue}, 70%, 75%, ${pulsingOpacity * 0.4})`);\n            gradient.addColorStop(1, `hsla(${beam.hue}, 70%, 75%, 0)`);\n\n            ctx.fillStyle = gradient;\n            ctx.fillRect(-beam.width / 2, 0, beam.width, beam.length);\n            ctx.restore();\n        }\n\n        function drawParticle(ctx: CanvasRenderingContext2D, particle: Particle, time: number) {\n            const twinkle = 0.7 + Math.sin(time * 0.003 + particle.x * 0.01) * 0.3;\n            ctx.save();\n            \n            ctx.globalAlpha = particle.opacity * twinkle * 0.6;\n            ctx.fillStyle = `hsl(${particle.hue}, 60%, 80%)`;\n            ctx.beginPath();\n            ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n            ctx.fill();\n            \n            ctx.restore();\n        }\n\n        function animate() {\n            if (!canvas || !ctx) return;\n            \n            timeRef.current += 16;\n            const time = timeRef.current;\n\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n            // Draw particles first (behind beams)\n            particlesRef.current.forEach((particle) => {\n                particle.x += particle.vx;\n                particle.y += particle.vy;\n                \n                const w = canvas.width / (window.devicePixelRatio || 1);\n                const h = canvas.height / (window.devicePixelRatio || 1);\n                \n                if (particle.x < 0 || particle.x > w || particle.y < 0 || particle.y > h) {\n                    particle.x = Math.random() * w;\n                    particle.y = Math.random() * h;\n                    particle.vx = (Math.random() - 0.5) * 0.5;\n                    particle.vy = (Math.random() - 0.5) * 0.5;\n                }\n                \n                drawParticle(ctx, particle, time);\n            });\n\n            // Draw beams with enhanced blur effect\n            ctx.filter = \"blur(1px)\";\n            beamsRef.current.forEach((beam, index) => {\n                beam.y -= beam.speed;\n                beam.pulse += beam.pulseSpeed;\n\n                if (beam.y + beam.length < -300) {\n                    resetBeam(beam);\n                }\n\n                drawBeam(ctx, beam, time);\n            });\n\n            ctx.filter = \"none\";\n            animationFrameRef.current = requestAnimationFrame(animate);\n        }\n\n        animate();\n\n        return () => {\n            window.removeEventListener(\"resize\", updateCanvasSize);\n            if (animationFrameRef.current) {\n                cancelAnimationFrame(animationFrameRef.current);\n            }\n        };\n    }, [intensity]);\n\n    return (\n        <div\n            className={cn(\n                \"relative min-h-screen w-full overflow-hidden\",\n                \"bg-gradient-to-br from-slate-950 via-indigo-950 to-slate-950\",\n                \n            )}\n        >\n            {/* Glassmorphism overlay */}\n            <div className=\"absolute inset-0 bg-gradient-to-t from-slate-950/60 via-transparent to-indigo-950/40\" />\n            \n            <canvas\n                ref={canvasRef}\n                className=\"absolute inset-0\"\n                style={{ mixBlendMode: 'screen' }}\n            />\n\n            {/* Animated mesh gradient overlay */}\n            <motion.div\n                className=\"absolute inset-0 opacity-30\"\n                style={{\n                    background: `\n                        radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.3) 0%, transparent 50%),\n                        radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.3) 0%, transparent 50%),\n                        radial-gradient(circle at 40% 40%, rgba(120, 219, 255, 0.3) 0%, transparent 50%)\n                    `\n                }}\n                animate={{\n                    opacity: [0.2, 0.4, 0.2],\n                }}\n                transition={{\n                    duration: 12,\n                    ease: \"easeInOut\",\n                    repeat: Infinity,\n                }}\n            />\n\n            <div className=\"relative z-10 flex h-screen w-full items-center justify-center\">\n                <div className=\"flex flex-col items-center justify-center gap-12 px-6 text-center max-w-5xl\">\n                    <motion.div\n                        className=\"space-y-6\"\n                        initial={{ opacity: 0, y: 40, filter: \"blur(10px)\" }}\n                        animate={{ opacity: 1, y: 0, filter: \"blur(0px)\" }}\n                        transition={{ \n                            duration: 1.5, \n                            ease: [0.16, 1, 0.3, 1]\n                        }}\n                    >\n                        <h1 className=\"text-7xl md:text-8xl lg:text-9xl font-bold text-white tracking-tighter leading-[0.9] relative\">\n                            <span className=\"relative inline-block\">\n                                Beautiful\n                                <motion.div\n                                    className=\"absolute -inset-1 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg blur-lg opacity-30\"\n                                    animate={{\n                                        opacity: [0.2, 0.4, 0.2],\n                                        scale: [0.98, 1.02, 0.98],\n                                    }}\n                                    transition={{\n                                        duration: 3,\n                                        ease: \"easeInOut\",\n                                        repeat: Infinity,\n                                    }}\n                                />\n                            </span>\n                            <br />\n                            <span className=\"bg-gradient-to-r from-blue-400 via-purple-400 to-pink-400 bg-clip-text text-transparent relative\">\n                                Experiences\n                                <motion.div\n                                    className=\"absolute inset-0 bg-gradient-to-r from-blue-400 via-purple-400 to-pink-400 opacity-20 blur-xl\"\n                                    animate={{\n                                        opacity: [0.1, 0.3, 0.1],\n                                    }}\n                                    transition={{\n                                        duration: 4,\n                                        ease: \"easeInOut\",\n                                        repeat: Infinity,\n                                    }}\n                                />\n                            </span>\n                        </h1>\n                    </motion.div>\n                    \n                    <motion.p\n                        className=\"text-2xl md:text-3xl text-slate-300/90 font-light tracking-wide max-w-3xl leading-relaxed\"\n                        initial={{ opacity: 0, y: 40 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        transition={{ \n                            duration: 1.5, \n                            delay: 0.3,\n                            ease: [0.16, 1, 0.3, 1]\n                        }}\n                    >\n                        Crafted with cutting-edge design and smooth animations that captivate and inspire\n                    </motion.p>\n\n                    <motion.div\n                        className=\"flex flex-col sm:flex-row gap-6 mt-12\"\n                        initial={{ opacity: 0, y: 40 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        transition={{ \n                            duration: 1.5, \n                            delay: 0.6,\n                            ease: [0.16, 1, 0.3, 1]\n                        }}\n                    >\n                        <motion.button \n                            className=\"group relative px-12 py-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-2xl font-semibold text-lg overflow-hidden shadow-2xl shadow-blue-500/25\"\n                            whileHover={{ scale: 1.05, y: -2 }}\n                            whileTap={{ scale: 0.98 }}\n                            transition={{ type: \"spring\", stiffness: 400, damping: 17 }}\n                        >\n                            <motion.div\n                                className=\"absolute inset-0 bg-gradient-to-r from-blue-400 to-purple-400\"\n                                initial={{ opacity: 0 }}\n                                whileHover={{ opacity: 1 }}\n                                transition={{ duration: 0.3 }}\n                            />\n                            <span className=\"relative z-10\">Explore Now</span>\n                            <motion.div\n                                className=\"absolute inset-0 bg-white\"\n                                initial={{ scale: 0, borderRadius: \"100%\" }}\n                                whileHover={{ \n                                    scale: 1.5, \n                                    opacity: [0, 0.1, 0],\n                                    borderRadius: \"0%\" \n                                }}\n                                transition={{ duration: 0.6 }}\n                            />\n                        </motion.button>\n                        \n                        <motion.button \n                            className=\"group px-12 py-4 border-2 border-slate-600/50 backdrop-blur-xl bg-white/5 text-white rounded-2xl font-semibold text-lg hover:border-slate-400/70 hover:bg-white/10 transition-all duration-300 shadow-xl\"\n                            whileHover={{ scale: 1.05, y: -2 }}\n                            whileTap={{ scale: 0.98 }}\n                            transition={{ type: \"spring\", stiffness: 400, damping: 17 }}\n                        >\n                            <span className=\"relative z-10\">Learn More</span>\n                        </motion.button>\n                    </motion.div>\n\n                    {/* Floating elements */}\n                    <motion.div\n                        className=\"absolute top-20 left-20 w-32 h-32 bg-gradient-to-br from-blue-500/20 to-purple-500/20 rounded-full blur-xl\"\n                        animate={{\n                            y: [0, -20, 0],\n                            opacity: [0.3, 0.6, 0.3],\n                        }}\n                        transition={{\n                            duration: 6,\n                            ease: \"easeInOut\",\n                            repeat: Infinity,\n                        }}\n                    />\n                    \n                    <motion.div\n                        className=\"absolute bottom-32 right-32 w-24 h-24 bg-gradient-to-br from-pink-500/20 to-blue-500/20 rounded-full blur-xl\"\n                        animate={{\n                            y: [0, 15, 0],\n                            x: [0, -10, 0],\n                            opacity: [0.4, 0.7, 0.4],\n                        }}\n                        transition={{\n                            duration: 8,\n                            ease: \"easeInOut\",\n                            repeat: Infinity,\n                            delay: 1,\n                        }}\n                    />\n                </div>\n            </div>\n\n            {/* Enhanced mesh gradient background */}\n            <div className=\"absolute inset-0 opacity-40\">\n                <motion.div\n                    className=\"absolute inset-0\"\n                    style={{\n                        background: `\n                            radial-gradient(circle at 10% 20%, rgba(120, 119, 198, 0.4) 0%, transparent 40%),\n                            radial-gradient(circle at 90% 10%, rgba(255, 119, 198, 0.3) 0%, transparent 40%),\n                            radial-gradient(circle at 50% 90%, rgba(120, 219, 255, 0.3) 0%, transparent 40%),\n                            radial-gradient(circle at 70% 60%, rgba(167, 139, 250, 0.2) 0%, transparent 40%)\n                        `\n                    }}\n                    animate={{\n                        opacity: [0.3, 0.6, 0.3],\n                    }}\n                    transition={{\n                        duration: 8,\n                        ease: \"easeInOut\",\n                        repeat: Infinity,\n                    }}\n                />\n            </div>\n\n            {/* Subtle grid overlay with animation */}\n            <motion.div \n                className=\"absolute inset-0 opacity-[0.03]\"\n                animate={{\n                    opacity: [0.02, 0.05, 0.02],\n                }}\n                transition={{\n                    duration: 10,\n                    ease: \"easeInOut\",\n                    repeat: Infinity,\n                }}\n            >\n                <div className=\"h-full w-full\" style={{\n                    backgroundImage: `\n                        linear-gradient(rgba(255,255,255,0.1) 1px, transparent 1px),\n                        linear-gradient(90deg, rgba(255,255,255,0.1) 1px, transparent 1px)\n                    `,\n                    backgroundSize: '60px 60px'\n                }} />\n            </motion.div>\n\n            {/* Vignette effect */}\n            <div className=\"absolute inset-0 bg-gradient-radial from-transparent via-transparent to-slate-950/60\" />\n        </div>\n    );\n}",
      "path": "components/componentcraftui/beams-background.tsx",
      "target": "components/componentcraft/beams-background.tsx"
    }
  ],
  "category": "component",
  "description": "beams-background component"
}