{
  "name": "ai-input-ai-input-06",
  "type": "registry:component",
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\"\r\n\r\nimport { CornerRightUp, Mic, X } from \"lucide-react\"\r\nimport { useState } from \"react\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Textarea } from \"@/components/ui/textarea\"\r\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\"\r\n\r\n// Glassmorphism background with backdrop blur\r\nexport default function AIInput_06() {\r\n  const { textareaRef, adjustHeight } = useAutoResizeTextarea({\r\n    minHeight: 52,\r\n    maxHeight: 200,\r\n  })\r\n  const [inputValue, setInputValue] = useState(\"\")\r\n\r\n  const handleSubmit = () => {\r\n    if (inputValue.trim()) {\r\n      console.log(\"Submitted:\", inputValue)\r\n      setInputValue(\"\")\r\n      adjustHeight(true)\r\n    }\r\n  }\r\n\r\n  const handleClear = () => {\r\n    setInputValue(\"\")\r\n    adjustHeight(true)\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-full py-4\">\r\n      <div className=\"relative max-w-xl w-full mx-auto\">\r\n        <div className=\"absolute inset-0 bg-gradient-to-r from-blue-500/10 to-purple-500/10 rounded-3xl blur-xl\" />\r\n        <Textarea\r\n          placeholder=\"Ask me anything...\"\r\n          className={cn(\r\n            \"relative backdrop-blur-md bg-white/20 dark:bg-black/20 rounded-3xl pl-6 pr-20\",\r\n            \"border border-white/30 dark:border-white/10\",\r\n            \"placeholder:text-gray-600 dark:placeholder:text-gray-400\",\r\n            \"text-gray-900 dark:text-white\",\r\n            \"focus-visible:ring-2 focus-visible:ring-blue-500/50 focus-visible:ring-offset-0\",\r\n            \"transition-all duration-200\",\r\n            \"min-h-[52px] max-h-[200px] resize-none overflow-y-auto\",\r\n          )}\r\n          ref={textareaRef}\r\n          value={inputValue}\r\n          onChange={(e) => {\r\n            setInputValue(e.target.value)\r\n            adjustHeight()\r\n          }}\r\n          onKeyDown={(e) => {\r\n            if (e.key === \"Enter\" && !e.shiftKey) {\r\n              e.preventDefault()\r\n              handleSubmit()\r\n            }\r\n          }}\r\n        />\r\n\r\n        <div className=\"absolute right-3 top-1/2 -translate-y-1/2 flex items-center gap-1\">\r\n          {inputValue && (\r\n            <button\r\n              onClick={handleClear}\r\n              className=\"p-1.5 rounded-lg bg-white/20 dark:bg-black/20 hover:bg-white/30 dark:hover:bg-black/30 transition-colors\"\r\n            >\r\n              <X className=\"w-4 h-4 text-gray-600 dark:text-gray-400\" />\r\n            </button>\r\n          )}\r\n          <button\r\n            onClick={handleSubmit}\r\n            className=\"p-1.5 rounded-lg bg-blue-500/20 hover:bg-blue-500/30 transition-colors\"\r\n          >\r\n            <CornerRightUp className=\"w-4 h-4 text-blue-600 dark:text-blue-400\" />\r\n          </button>\r\n        </div>\r\n\r\n        <button className=\"absolute left-3 top-1/2 -translate-y-1/2 p-1.5 rounded-lg bg-white/20 dark:bg-black/20 hover:bg-white/30 dark:hover:bg-black/30 transition-colors\">\r\n          <Mic className=\"w-4 h-4 text-gray-600 dark:text-gray-400\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "path": "components/componentcraftui/ai-input/ai-input-06.tsx",
      "target": "components/componentcraft/ai-input-06.tsx"
    },
    {
      "type": "registry:hook",
      "content": "\r\nimport { useEffect, useRef, useCallback } from \"react\";\r\n\r\ninterface UseAutoResizeTextareaProps {\r\n    minHeight: number;\r\n    maxHeight?: number;\r\n}\r\n\r\nexport function useAutoResizeTextarea({\r\n    minHeight,\r\n    maxHeight,\r\n}: UseAutoResizeTextareaProps) {\r\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n    const adjustHeight = useCallback(\r\n        (reset?: boolean) => {\r\n            const textarea = textareaRef.current;\r\n            if (!textarea) return;\r\n\r\n            if (reset) {\r\n                textarea.style.height = `${minHeight}px`;\r\n                return;\r\n            }\r\n\r\n            // Temporarily shrink to get the right scrollHeight\r\n            textarea.style.height = `${minHeight}px`;\r\n\r\n            // Calculate new height\r\n            const newHeight = Math.max(\r\n                minHeight,\r\n                Math.min(\r\n                    textarea.scrollHeight,\r\n                    maxHeight ?? Number.POSITIVE_INFINITY\r\n                )\r\n            );\r\n\r\n            textarea.style.height = `${newHeight}px`;\r\n        },\r\n        [minHeight, maxHeight]\r\n    );\r\n\r\n    useEffect(() => {\r\n        // Set initial height\r\n        const textarea = textareaRef.current;\r\n        if (textarea) {\r\n            textarea.style.height = `${minHeight}px`;\r\n        }\r\n    }, [minHeight]);\r\n\r\n    // Adjust height on window resize\r\n    useEffect(() => {\r\n        const handleResize = () => adjustHeight();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, [adjustHeight]);\r\n\r\n    return { textareaRef, adjustHeight };\r\n}\r\n",
      "path": "hooks/use-auto-resize-textarea.tsx",
      "target": "hooks/use-auto-resize-textarea.tsx"
    },
    {
      "type": "registry:hook",
      "content": "\r\nimport { useEffect, useRef, useCallback } from \"react\";\r\n\r\ninterface UseAutoResizeTextareaProps {\r\n    minHeight: number;\r\n    maxHeight?: number;\r\n}\r\n\r\nexport function useAutoResizeTextarea({\r\n    minHeight,\r\n    maxHeight,\r\n}: UseAutoResizeTextareaProps) {\r\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n    const adjustHeight = useCallback(\r\n        (reset?: boolean) => {\r\n            const textarea = textareaRef.current;\r\n            if (!textarea) return;\r\n\r\n            if (reset) {\r\n                textarea.style.height = `${minHeight}px`;\r\n                return;\r\n            }\r\n\r\n            // Temporarily shrink to get the right scrollHeight\r\n            textarea.style.height = `${minHeight}px`;\r\n\r\n            // Calculate new height\r\n            const newHeight = Math.max(\r\n                minHeight,\r\n                Math.min(\r\n                    textarea.scrollHeight,\r\n                    maxHeight ?? Number.POSITIVE_INFINITY\r\n                )\r\n            );\r\n\r\n            textarea.style.height = `${newHeight}px`;\r\n        },\r\n        [minHeight, maxHeight]\r\n    );\r\n\r\n    useEffect(() => {\r\n        // Set initial height\r\n        const textarea = textareaRef.current;\r\n        if (textarea) {\r\n            textarea.style.height = `${minHeight}px`;\r\n        }\r\n    }, [minHeight]);\r\n\r\n    // Adjust height on window resize\r\n    useEffect(() => {\r\n        const handleResize = () => adjustHeight();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, [adjustHeight]);\r\n\r\n    return { textareaRef, adjustHeight };\r\n}\r\n",
      "path": "hooks/use-auto-resize-textarea.tsx",
      "target": "hooks/use-auto-resize-textarea.tsx"
    }
  ],
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "textarea"
  ]
}