{
  "name": "particles-background",
  "type": "registry:component",
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\"\n\nimport { useEffect, useRef, useMemo } from \"react\"\nimport { motion } from \"motion/react\"\nimport { cn } from \"@/lib/utils\"\n\ntype FlowDirection =\n  | \"ltr\" // left-to-right\n  | \"rtl\" // right-to-left\n  | \"ttb\" // top-to-bottom\n  | \"btt\" // bottom-to-top\n  | \"radial-out\"\n  | \"radial-in\"\n\ninterface FlowFieldBackgroundProps {\n  title?: string\n  subtitle?: string\n  particleCount?: number\n  noiseScale?: number // how finely we sample the noise field\n  speed?: number // base particle speed\n  lineLength?: number // how long each step is drawn (creates trails)\n  flowDirection?: FlowDirection\n  particleSize?: { min: number; max: number }\n  className?: string\n}\n\nfunction createNoise() {\n  const permutation = [\n    151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240,\n    21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88,\n    237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83,\n    111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80,\n    73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64,\n    52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182,\n    189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22,\n    39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210,\n    144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84,\n    204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78,\n    66, 215, 61, 156, 180,\n  ]\n  const p = new Array<number>(512)\n  for (let i = 0; i < 256; i++) p[256 + i] = p[i] = permutation[i]\n\n  function fade(t: number) {\n    return t * t * t * (t * (t * 6 - 15) + 10)\n  }\n  function lerp(t: number, a: number, b: number) {\n    return a + t * (b - a)\n  }\n  function grad(hash: number, x: number, y: number, z: number) {\n    const h = hash & 15\n    const u = h < 8 ? x : y\n    const v = h < 4 ? y : h === 12 || h === 14 ? x : z\n    return ((h & 1) === 0 ? u : -u) + ((h & 2) === 0 ? v : -v)\n  }\n\n  return {\n    simplex3(x: number, y: number, z: number) {\n      const X = Math.floor(x) & 255\n      const Y = Math.floor(y) & 255\n      const Z = Math.floor(z) & 255\n\n      x -= Math.floor(x)\n      y -= Math.floor(y)\n      z -= Math.floor(z)\n\n      const u = fade(x)\n      const v = fade(y)\n      const w = fade(z)\n\n      const A = p[X] + Y\n      const AA = p[A] + Z\n      const AB = p[A + 1] + Z\n      const B = p[X + 1] + Y\n      const BA = p[B] + Z\n      const BB = p[B + 1] + Z\n\n      return lerp(\n        w,\n        lerp(\n          v,\n          lerp(u, grad(p[AA], x, y, z), grad(p[BA], x - 1, y, z)),\n          lerp(u, grad(p[AB], x, y - 1, z), grad(p[BB], x - 1, y - 1, z)),\n        ),\n        lerp(\n          v,\n          lerp(u, grad(p[AA + 1], x, y, z - 1), grad(p[BA + 1], x - 1, y, z - 1)),\n          lerp(u, grad(p[AB + 1], x, y - 1, z - 1), grad(p[BB + 1], x - 1, y - 1, z - 1)),\n        ),\n      )\n    },\n  }\n}\n\ninterface Particle {\n  x: number\n  y: number\n  px: number\n  py: number\n  size: number\n  life: number\n  maxLife: number\n  colorIndex: number\n}\n\nexport default function FlowFieldBackground({\n  title = \"Flow Field\",\n  subtitle = \"Monochrome particles with directional drift\",\n  particleCount = 1200,\n  noiseScale = 0.0025,\n  speed = 1.4,\n  lineLength = 2.0,\n  flowDirection = \"rtl\",\n  particleSize = { min: 0.6, max: 1.8 },\n  className,\n}: FlowFieldBackgroundProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const noise = useMemo(createNoise, [])\n\n  useEffect(() => {\n    const canvas = canvasRef.current\n    if (!canvas) return\n\n    const dpr = Math.min(window.devicePixelRatio || 1, 2)\n    const ctx = canvas.getContext(\"2d\", { alpha: true })\n    if (!ctx) return\n\n    const resize = () => {\n      const parent = canvas.parentElement\n      if (!parent) return\n      const w = parent.clientWidth\n      const h = parent.clientHeight\n      canvas.width = Math.floor(w * dpr)\n      canvas.height = Math.floor(h * dpr)\n      canvas.style.width = `${w}px`\n      canvas.style.height = `${h}px`\n      ctx.setTransform(dpr, 0, 0, dpr, 0, 0)\n    }\n\n    resize()\n\n    const palette = [\"#60a5fa\", \"#22d3ee\"] as const\n    const hexToRgba = (hex: string, alpha: number) => {\n      const h = hex.replace(\"#\", \"\")\n      const r = Number.parseInt(h.substring(0, 2), 16)\n      const g = Number.parseInt(h.substring(2, 4), 16)\n      const b = Number.parseInt(h.substring(4, 6), 16)\n      return `rgba(${r}, ${g}, ${b}, ${alpha})`\n    }\n    const lineColors = palette.map((c) => hexToRgba(c, 0.14))\n    const dotColors = palette.map((c) => hexToRgba(c, 0.28))\n\n    const rand = (a: number, b: number) => a + Math.random() * (b - a)\n    const particles: Particle[] = Array.from({ length: particleCount }, () => ({\n      x: Math.random() * (canvas.width / dpr),\n      y: Math.random() * (canvas.height / dpr),\n      px: 0,\n      py: 0,\n      size: rand(particleSize.min, particleSize.max),\n      life: rand(0, 100),\n      maxLife: rand(120, 220),\n      colorIndex: Math.floor(Math.random() * palette.length),\n    }))\n\n    const fadeBlack = \"rgba(0,0,0,0.08)\"\n\n    let raf = 0\n    const step = () => {\n      ctx.fillStyle = fadeBlack\n      ctx.fillRect(0, 0, canvas.width / dpr, canvas.height / dpr)\n\n      const t = performance.now() * 0.00015\n\n      for (const p of particles) {\n        p.life += 1\n        if (p.life > p.maxLife) {\n          p.life = 0\n          p.x = Math.random() * (canvas.width / dpr)\n          p.y = Math.random() * (canvas.height / dpr)\n          p.colorIndex = Math.floor(Math.random() * palette.length)\n        }\n\n        p.px = p.x\n        p.py = p.y\n\n        const n = noise.simplex3(p.x * noiseScale, p.y * noiseScale, t)\n        const baseAngle = n * Math.PI * 2\n        const dirBias = Math.atan2(p.y - (canvas.height / dpr) * 0.5, p.x - (canvas.width / dpr) * 0.5)\n        const angle = baseAngle * 0.6 + dirBias * 0.4\n\n        const v = speed * (0.6 + p.size * 0.4)\n        p.x += Math.cos(angle) * v * lineLength\n        p.y += Math.sin(angle) * v * lineLength\n\n        const W = canvas.width / dpr\n        const H = canvas.height / dpr\n        if (p.x < 0) p.x = W\n        if (p.x > W) p.x = 0\n        if (p.y < 0) p.y = H\n        if (p.y > H) p.y = 0\n\n        ctx.strokeStyle = lineColors[p.colorIndex]\n        ctx.lineWidth = p.size\n        ctx.beginPath()\n        ctx.moveTo(p.px, p.py)\n        ctx.lineTo(p.x, p.y)\n        ctx.stroke()\n\n        if ((p.life | 0) % 28 === 0) {\n          ctx.fillStyle = dotColors[p.colorIndex]\n          ctx.beginPath()\n          ctx.arc(p.x, p.y, p.size * 0.8, 0, Math.PI * 2)\n          ctx.fill()\n        }\n      }\n\n      raf = requestAnimationFrame(step)\n    }\n\n    ctx.fillStyle = \"#000000\"\n    ctx.fillRect(0, 0, canvas.width / dpr, canvas.height / dpr)\n\n    step()\n\n    const onResize = () => {\n      resize()\n    }\n    window.addEventListener(\"resize\", onResize)\n\n    return () => {\n      cancelAnimationFrame(raf)\n      window.removeEventListener(\"resize\", onResize)\n    }\n  }, [particleCount, noiseScale, speed, lineLength, flowDirection, particleSize, noise])\n\n  const initialOffset = (() => {\n    switch (flowDirection) {\n      case \"ltr\":\n        return { x: -40, y: 0 }\n      case \"rtl\":\n        return { x: 40, y: 0 }\n      case \"ttb\":\n        return { x: 0, y: -40 }\n      case \"btt\":\n        return { x: 0, y: 40 }\n      case \"radial-in\":\n        return { scale: 1.06 }\n      case \"radial-out\":\n        return { scale: 0.94 }\n      default:\n        return { y: 20 }\n    }\n  })()\n\n  return (\n    <div className={cn(\"relative w-full h-screen overflow-hidden\", \"bg-black\", className)}>\n      <canvas ref={canvasRef} className=\"absolute inset-0 w-full h-full\" />\n      <div className=\"relative z-10 flex flex-col items-center justify-center w-full h-full\">\n        <motion.div\n          initial={{ opacity: 0, ...initialOffset }}\n          animate={{ opacity: 1, x: 0, y: 0, scale: 1 }}\n          transition={{ duration: 0.9, ease: [0.22, 1, 0.36, 1] }}\n          className=\"text-center space-y-4 px-4\"\n        >\n          <h1 className=\"text-5xl md:text-7xl font-bold text-white text-balance tracking-tight\">{title}</h1>\n          <p className=\"text-lg md:text-2xl text-white/70 max-w-xl mx-auto leading-relaxed\">{subtitle}</p>\n        </motion.div>\n      </div>\n    </div>\n  )\n}\n",
      "path": "components/componentcraftui/particles-background.tsx",
      "target": "components/componentcraft/particles-background.tsx"
    }
  ],
  "category": "component",
  "description": "particles-background component"
}