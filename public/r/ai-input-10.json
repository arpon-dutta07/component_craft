{
  "name": "ai-input-10",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "textarea"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\"\r\n\r\nimport { Search, Mic, ArrowRight } from \"lucide-react\"\r\nimport { useState } from \"react\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Textarea } from \"@/components/ui/textarea\"\r\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\"\r\n\r\n// Input with integrated icon inside and search-like appearance\r\nexport default function AIInput_10() {\r\n  const { textareaRef, adjustHeight } = useAutoResizeTextarea({\r\n    minHeight: 50,\r\n    maxHeight: 200,\r\n  })\r\n  const [inputValue, setInputValue] = useState(\"\")\r\n\r\n  const handleSubmit = () => {\r\n    if (inputValue.trim()) {\r\n      console.log(\"Submitted:\", inputValue)\r\n      setInputValue(\"\")\r\n      adjustHeight(true)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-full py-4\">\r\n      <div className=\"relative max-w-xl w-full mx-auto\">\r\n        <div className=\"relative flex items-start bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-full shadow-sm hover:shadow-md transition-shadow\">\r\n          <div className=\"flex items-center pl-4 pr-2 py-3\">\r\n            <Search className=\"w-5 h-5 text-gray-400 dark:text-gray-500\" />\r\n          </div>\r\n\r\n          <Textarea\r\n            placeholder=\"Search or ask AI...\"\r\n            className={cn(\r\n              \"flex-1 bg-transparent border-none rounded-full\",\r\n              \"placeholder:text-gray-500 dark:placeholder:text-gray-400\",\r\n              \"text-gray-900 dark:text-white\",\r\n              \"focus-visible:ring-0 focus-visible:ring-offset-0\",\r\n              \"min-h-[50px] max-h-[200px] resize-none overflow-y-auto\",\r\n              \"py-3 pr-2\",\r\n            )}\r\n            ref={textareaRef}\r\n            value={inputValue}\r\n            onChange={(e) => {\r\n              setInputValue(e.target.value)\r\n              adjustHeight()\r\n            }}\r\n            onKeyDown={(e) => {\r\n              if (e.key === \"Enter\" && !e.shiftKey) {\r\n                e.preventDefault()\r\n                handleSubmit()\r\n              }\r\n            }}\r\n          />\r\n\r\n          <div className=\"flex items-center gap-1 pr-2 py-3\">\r\n            <button className=\"p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors\">\r\n              <Mic className=\"w-4 h-4 text-gray-500 dark:text-gray-400\" />\r\n            </button>\r\n\r\n            {inputValue && (\r\n              <button\r\n                onClick={handleSubmit}\r\n                className=\"p-2 rounded-full bg-blue-500 text-white hover:bg-blue-600 transition-colors\"\r\n              >\r\n                <ArrowRight className=\"w-4 h-4\" />\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "path": "components/componentcraftui/ai-input/ai-input-10.tsx",
      "target": "components/componentcraft/ai-input-10.tsx"
    },
    {
      "type": "registry:hook",
      "content": "\r\nimport { useEffect, useRef, useCallback } from \"react\";\r\n\r\ninterface UseAutoResizeTextareaProps {\r\n    minHeight: number;\r\n    maxHeight?: number;\r\n}\r\n\r\nexport function useAutoResizeTextarea({\r\n    minHeight,\r\n    maxHeight,\r\n}: UseAutoResizeTextareaProps) {\r\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n    const adjustHeight = useCallback(\r\n        (reset?: boolean) => {\r\n            const textarea = textareaRef.current;\r\n            if (!textarea) return;\r\n\r\n            if (reset) {\r\n                textarea.style.height = `${minHeight}px`;\r\n                return;\r\n            }\r\n\r\n            // Temporarily shrink to get the right scrollHeight\r\n            textarea.style.height = `${minHeight}px`;\r\n\r\n            // Calculate new height\r\n            const newHeight = Math.max(\r\n                minHeight,\r\n                Math.min(\r\n                    textarea.scrollHeight,\r\n                    maxHeight ?? Number.POSITIVE_INFINITY\r\n                )\r\n            );\r\n\r\n            textarea.style.height = `${newHeight}px`;\r\n        },\r\n        [minHeight, maxHeight]\r\n    );\r\n\r\n    useEffect(() => {\r\n        // Set initial height\r\n        const textarea = textareaRef.current;\r\n        if (textarea) {\r\n            textarea.style.height = `${minHeight}px`;\r\n        }\r\n    }, [minHeight]);\r\n\r\n    // Adjust height on window resize\r\n    useEffect(() => {\r\n        const handleResize = () => adjustHeight();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, [adjustHeight]);\r\n\r\n    return { textareaRef, adjustHeight };\r\n}\r\n",
      "path": "hooks/use-auto-resize-textarea.tsx",
      "target": "hooks/use-auto-resize-textarea.tsx"
    },
    {
      "type": "registry:hook",
      "content": "import { useState, useRef } from \"react\";\n\ninterface UseFileInputOptions {\n    accept?: string;\n    maxSize?: number;\n}\n\nexport function useFileInput({ accept, maxSize }: UseFileInputOptions) {\n    const [fileName, setFileName] = useState<string>(\"\");\n    const [error, setError] = useState<string>(\"\");\n    const fileInputRef = useRef<HTMLInputElement>(null);\n    const [fileSize, setFileSize] = useState<number>(0);\n\n    const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const file = e.target.files?.[0];\n        validateAndSetFile(file);\n    };\n\n    const validateAndSetFile = (file: File | undefined) => {\n        setError(\"\");\n\n        if (file) {\n            if (maxSize && file.size > maxSize * 1024 * 1024) {\n                setError(`File size must be less than ${maxSize}MB`);\n                return;\n            }\n\n            if (\n                accept &&\n                !file.type.match(accept.replace(\"/*\", \"/\"))\n            ) {\n                setError(`File type must be ${accept}`);\n                return;\n            }\n\n            setFileSize(file.size);\n            setFileName(file.name);\n        }\n    };\n\n    const clearFile = () => {\n        setFileName(\"\");\n        setError(\"\");\n        setFileSize(0);\n        if (fileInputRef.current) {\n            fileInputRef.current.value = \"\";\n        }\n    };\n\n    return {\n        fileName,\n        error,\n        fileInputRef,\n        handleFileSelect,\n        validateAndSetFile,\n        clearFile,\n        fileSize,\n    };\n}\n",
      "path": "hooks/use-file-input.ts",
      "target": "hooks/use-file-input.ts"
    },
    {
      "type": "registry:hook",
      "content": "import { useEffect, type RefObject } from \"react\";\n\nexport function useClickOutside(\n    ref: RefObject<HTMLElement>,\n    handler: () => void\n) {\n    useEffect(() => {\n        const handleClickOutside = (event: MouseEvent) => {\n            if (ref.current && !ref.current.contains(event.target as Node)) {\n                handler();\n            }\n        };\n\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () =>\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n    }, [ref, handler]);\n}\n",
      "path": "hooks/use-click-outside.ts",
      "target": "hooks/use-click-outside.ts"
    }
  ]
}