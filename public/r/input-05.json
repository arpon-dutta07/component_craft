{
  "name": "input-05",
  "type": "registry:component",
  "files": [
    {
      "type": "registry:component",
      "content": "// Input - File Upload (drag & drop, preview, progress bar)\n\"use client\"\n\nimport type React from \"react\"\n\nimport { useCallback, useEffect, useRef, useState } from \"react\"\nimport { Upload, X, Check } from \"lucide-react\"\nimport { motion, AnimatePresence } from \"framer-motion\"\nimport { cn } from \"@/lib/utils\"\n\ntype LocalFile = {\n  id: string\n  file: File\n  preview?: string\n  progress: number // 0-100\n  done: boolean\n}\n\nexport default function InputFileUpload() {\n  const [files, setFiles] = useState<LocalFile[]>([])\n  const [isDragOver, setDragOver] = useState(false)\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  const simulateUpload = (id: string) => {\n    let p = 0\n    const interval = setInterval(() => {\n      p += Math.floor(Math.random() * 12) + 8 // 8-20 steps\n      setFiles((prev) => prev.map((f) => (f.id === id ? { ...f, progress: Math.min(p, 100), done: p >= 100 } : f)))\n      if (p >= 100) clearInterval(interval)\n    }, 180)\n  }\n\n  const onFiles = useCallback((list: FileList | null) => {\n    if (!list?.length) return\n    const incoming: LocalFile[] = Array.from(list).map((file) => ({\n      id: `${file.name}-${file.size}-${file.lastModified}-${Math.random().toString(36).slice(2)}`,\n      file,\n      preview: file.type.startsWith(\"image/\") ? URL.createObjectURL(file) : undefined,\n      progress: 0,\n      done: false,\n    }))\n    setFiles((prev) => [...prev, ...incoming])\n    incoming.forEach((f) => simulateUpload(f.id))\n  }, [])\n\n  const onDrop = (e: React.DragEvent) => {\n    e.preventDefault()\n    setDragOver(false)\n    onFiles(e.dataTransfer.files)\n  }\n\n  useEffect(() => {\n    return () => {\n      files.forEach((f) => f.preview && URL.revokeObjectURL(f.preview))\n    }\n  }, [files])\n\n  return (\n    <div className=\"w-full max-w-lg space-y-2\">\n      <label className=\"text-sm font-medium text-zinc-300\">Upload files</label>\n      <div\n        onDragOver={(e) => {\n          e.preventDefault()\n          setDragOver(true)\n        }}\n        onDragLeave={() => setDragOver(false)}\n        onDrop={onDrop}\n        className={cn(\n          \"flex flex-col items-center justify-center gap-2 rounded-xl border-2 border-dashed p-6 transition-all\",\n          \"bg-black/50 border-zinc-800 hover:border-zinc-700\",\n          isDragOver && \"border-indigo-500/50 bg-indigo-500/5\",\n        )}\n        role=\"button\"\n        aria-label=\"File dropzone\"\n        tabIndex={0}\n        onKeyDown={(e) => {\n          if (e.key === \"Enter\" || e.key === \" \") inputRef.current?.click()\n        }}\n      >\n        <Upload className=\"h-6 w-6 text-zinc-400\" />\n        <p className=\"text-sm text-zinc-200\">Drag & drop files here</p>\n        <p className=\"text-xs text-zinc-500\">or</p>\n        <button\n          className=\"rounded-md bg-indigo-600 px-3 py-1.5 text-xs font-medium text-white hover:bg-indigo-500\"\n          onClick={() => inputRef.current?.click()}\n        >\n          Browse files\n        </button>\n        <input ref={inputRef} type=\"file\" multiple className=\"sr-only\" onChange={(e) => onFiles(e.target.files)} aria-label=\"File upload\" />\n      </div>\n\n      <AnimatePresence>\n        {files.length > 0 && (\n          <motion.ul\n            initial={{ opacity: 0, y: -4 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0 }}\n            className=\"space-y-2\"\n          >\n            {files.map((f) => (\n              <li key={f.id} className=\"flex items-center gap-3 rounded-lg border border-zinc-800 bg-zinc-950/50 p-3\">\n                <div className=\"h-10 w-10 shrink-0 overflow-hidden rounded-md bg-zinc-900 ring-1 ring-zinc-800\">\n                  {f.preview ? (\n                    // eslint-disable-next-line @next/next/no-img-element\n                    <img\n                      src={f.preview || \"/placeholder.svg\"}\n                      alt={f.file.name}\n                      className=\"h-full w-full object-cover\"\n                    />\n                  ) : (\n                    <div className=\"flex h-full w-full items-center justify-center text-xs text-zinc-400\">\n                      {f.file.type || \"file\"}\n                    </div>\n                  )}\n                </div>\n                <div className=\"min-w-0 flex-1\">\n                  <p className=\"truncate text-sm text-zinc-200\">{f.file.name}</p>\n                  <div className=\"mt-1 h-2 w-full overflow-hidden rounded bg-zinc-900 ring-1 ring-zinc-800\">\n                    <motion.div\n                      className={cn(\"h-full bg-indigo-600\", f.done && \"bg-emerald-500\")}\n                      initial={{ width: 0 }}\n                      animate={{ width: `${f.progress}%` }}\n                      transition={{ type: \"tween\", ease: \"easeInOut\", duration: 0.2 }}\n                    />\n                  </div>\n                </div>\n                {f.done ? (\n                  <Check className=\"h-4 w-4 text-emerald-500\" aria-label=\"Upload complete\" />\n                ) : (\n                  <div className=\"h-4 w-4 animate-pulse rounded-full bg-indigo-600/50\" aria-hidden />\n                )}\n                <button\n                  aria-label=\"Remove file\"\n                  onClick={() => setFiles((prev) => prev.filter((x) => x.id !== f.id))}\n                  className=\"rounded p-1 text-zinc-500 hover:text-zinc-200\"\n                >\n                  <X className=\"h-4 w-4\" />\n                </button>\n              </li>\n            ))}\n          </motion.ul>\n        )}\n      </AnimatePresence>\n    </div>\n  )\n}\n",
      "path": "components/componentcraftui/input/input-05.tsx",
      "target": "components/componentcraft/input-05.tsx"
    }
  ],
  "category": "input",
  "subcategory": "component",
  "description": "input-05 component"
}