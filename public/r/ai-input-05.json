{
  "name": "ai-input-05",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "textarea"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\"\r\n\r\nimport { Send, Mic, Figma, Sparkles, Code, Zap, ChevronDown } from \"lucide-react\"\r\nimport { useState } from \"react\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Textarea } from \"@/components/ui/textarea\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\"\r\n\r\nconst agents = [\r\n  { id: \"creative\", name: \"Creative\", icon: Sparkles },\r\n  { id: \"code\", name: \"Code\", icon: Code },\r\n  { id: \"design\", name: \"Design\", icon: Figma },\r\n  { id: \"automation\", name: \"Automation\", icon: Zap },\r\n]\r\n\r\nconst suggestions = [\r\n  \"Design a modern landing page\",\r\n  \"Write clean React components\",\r\n  \"Create a color palette\",\r\n  \"Generate marketing copy\",\r\n]\r\n\r\nexport default function AIInput_05() {\r\n  const { textareaRef, adjustHeight } = useAutoResizeTextarea({\r\n    minHeight: 56,\r\n    maxHeight: 200,\r\n  })\r\n  const [inputValue, setInputValue] = useState(\"\")\r\n  const [selectedAgent, setSelectedAgent] = useState(agents[0])\r\n  const [showAgentDropdown, setShowAgentDropdown] = useState(false)\r\n  const [showSuggestions, setShowSuggestions] = useState(true)\r\n\r\n  const handleSubmit = () => {\r\n    if (!inputValue.trim()) return\r\n    console.log(\"Submitted:\", inputValue)\r\n    setInputValue(\"\")\r\n    adjustHeight(true)\r\n    setShowSuggestions(true)\r\n  }\r\n\r\n  const handleSuggestionClick = (suggestion: string) => {\r\n    setInputValue(suggestion)\r\n    setShowSuggestions(false)\r\n    adjustHeight()\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-full max-w-2xl mx-auto p-6\">\r\n      {/* Suggestion Chips */}\r\n      {showSuggestions && !inputValue && (\r\n        <div className=\"mb-4 space-y-3\">\r\n          <p className=\"text-sm font-medium text-muted-foreground\">Try these prompts:</p>\r\n          <div className=\"flex flex-wrap gap-2\">\r\n            {suggestions.map((suggestion, index) => (\r\n              <Button\r\n                key={index}\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                className=\"h-8 text-xs bg-muted hover:bg-accent hover:text-accent-foreground transition-all duration-200 border-border\"\r\n                onClick={() => handleSuggestionClick(suggestion)}\r\n              >\r\n                {suggestion}\r\n              </Button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Main Input Container */}\r\n      <div className=\"relative bg-input rounded-2xl border border-border shadow-sm hover:shadow-md transition-shadow duration-200\">\r\n        {/* Agent Selection */}\r\n        <div className=\"relative\">\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            onClick={() => setShowAgentDropdown(!showAgentDropdown)}\r\n            className=\"absolute left-4 top-4 h-8 px-2 text-xs bg-card hover:bg-muted border border-border z-10\"\r\n          >\r\n            <selectedAgent.icon className=\"w-3 h-3 mr-1.5\" />\r\n            {selectedAgent.name}\r\n            <ChevronDown className={cn(\"w-3 h-3 ml-1 transition-transform\", showAgentDropdown && \"rotate-180\")} />\r\n          </Button>\r\n\r\n          {showAgentDropdown && (\r\n            <div className=\"absolute left-4 top-12 bg-card border border-border rounded-lg shadow-lg z-20 min-w-[120px]\">\r\n              {agents.map((agent) => (\r\n                <Button\r\n                  key={agent.id}\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  onClick={() => {\r\n                    setSelectedAgent(agent)\r\n                    setShowAgentDropdown(false)\r\n                  }}\r\n                  className=\"w-full justify-start h-8 px-3 text-xs hover:bg-muted\"\r\n                >\r\n                  <agent.icon className=\"w-3 h-3 mr-1.5\" />\r\n                  {agent.name}\r\n                </Button>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Figma Icon */}\r\n        <div className=\"absolute left-4 top-1/2 -translate-y-1/2 w-6 h-6 bg-accent rounded-md flex items-center justify-center\">\r\n          <Figma className=\"w-4 h-4 text-accent-foreground\" />\r\n        </div>\r\n\r\n        <Textarea\r\n          ref={textareaRef}\r\n          placeholder=\"Ask AI to design, code, or create...\"\r\n          className={cn(\r\n            \"border-0 bg-transparent resize-none\",\r\n            \"placeholder:text-muted-foreground\",\r\n            \"focus-visible:ring-0 focus-visible:ring-offset-0\",\r\n            \"pl-16 pr-20 py-4\",\r\n            \"min-h-[56px] max-h-[200px]\",\r\n            \"text-sm leading-relaxed\",\r\n          )}\r\n          value={inputValue}\r\n          onChange={(e) => {\r\n            setInputValue(e.target.value)\r\n            setShowSuggestions(false)\r\n            adjustHeight()\r\n          }}\r\n          onKeyDown={(e) => {\r\n            if (e.key === \"Enter\" && !e.shiftKey) {\r\n              e.preventDefault()\r\n              handleSubmit()\r\n            }\r\n          }}\r\n        />\r\n\r\n        {/* Action Buttons */}\r\n        <div className=\"absolute right-3 top-1/2 -translate-y-1/2 flex items-center gap-2\">\r\n          <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 p-0 hover:bg-muted rounded-lg\">\r\n            <Mic className=\"w-4 h-4 text-muted-foreground\" />\r\n          </Button>\r\n          <Button\r\n            onClick={handleSubmit}\r\n            disabled={!inputValue.trim()}\r\n            size=\"sm\"\r\n            className={cn(\r\n              \"h-8 w-8 p-0 rounded-lg transition-all duration-200\",\r\n              inputValue.trim()\r\n                ? \"bg-primary hover:bg-primary/90 text-primary-foreground shadow-sm\"\r\n                : \"bg-muted text-muted-foreground cursor-not-allowed\",\r\n            )}\r\n          >\r\n            <Send className=\"w-4 h-4\" />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "path": "/components/componentcraftui/ai-input/ai-input-05.tsx",
      "target": "/components/componentcraft/ai-input-05.tsx"
    },
    {
      "type": "registry:hook",
      "content": "\r\nimport { useEffect, useRef, useCallback } from \"react\";\r\n\r\ninterface UseAutoResizeTextareaProps {\r\n    minHeight: number;\r\n    maxHeight?: number;\r\n}\r\n\r\nexport function useAutoResizeTextarea({\r\n    minHeight,\r\n    maxHeight,\r\n}: UseAutoResizeTextareaProps) {\r\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n    const adjustHeight = useCallback(\r\n        (reset?: boolean) => {\r\n            const textarea = textareaRef.current;\r\n            if (!textarea) return;\r\n\r\n            if (reset) {\r\n                textarea.style.height = `${minHeight}px`;\r\n                return;\r\n            }\r\n\r\n            // Temporarily shrink to get the right scrollHeight\r\n            textarea.style.height = `${minHeight}px`;\r\n\r\n            // Calculate new height\r\n            const newHeight = Math.max(\r\n                minHeight,\r\n                Math.min(\r\n                    textarea.scrollHeight,\r\n                    maxHeight ?? Number.POSITIVE_INFINITY\r\n                )\r\n            );\r\n\r\n            textarea.style.height = `${newHeight}px`;\r\n        },\r\n        [minHeight, maxHeight]\r\n    );\r\n\r\n    useEffect(() => {\r\n        // Set initial height\r\n        const textarea = textareaRef.current;\r\n        if (textarea) {\r\n            textarea.style.height = `${minHeight}px`;\r\n        }\r\n    }, [minHeight]);\r\n\r\n    // Adjust height on window resize\r\n    useEffect(() => {\r\n        const handleResize = () => adjustHeight();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, [adjustHeight]);\r\n\r\n    return { textareaRef, adjustHeight };\r\n}\r\n",
      "path": "/hooks/use-auto-resize-textarea.tsx",
      "target": "/hooks/use-auto-resize-textarea.tsx"
    }
  ]
}