{
  "name": "ai-input-11",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "textarea"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\"\r\n\r\nimport { Zap, Mic, ArrowUp } from \"lucide-react\"\r\nimport { useState } from \"react\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Textarea } from \"@/components/ui/textarea\"\r\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\"\r\n\r\n// Futuristic neon/glow style with electric theme\r\nexport default function AIInput_11() {\r\n  const { textareaRef, adjustHeight } = useAutoResizeTextarea({\r\n    minHeight: 58,\r\n    maxHeight: 200,\r\n  })\r\n  const [inputValue, setInputValue] = useState(\"\")\r\n\r\n  const handleSubmit = () => {\r\n    if (inputValue.trim()) {\r\n      console.log(\"Submitted:\", inputValue)\r\n      setInputValue(\"\")\r\n      adjustHeight(true)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-full py-4\">\r\n      <div className=\"relative max-w-xl w-full mx-auto\">\r\n        <div className=\"relative\">\r\n          {/* Neon glow effect */}\r\n          <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/20 via-purple-500/20 to-pink-500/20 rounded-2xl blur-xl animate-pulse\" />\r\n\r\n          <div className=\"relative bg-black/90 dark:bg-black/95 border border-cyan-500/30 rounded-2xl overflow-hidden\">\r\n            {/* Electric border animation */}\r\n            <div\r\n              className=\"absolute inset-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 opacity-30 animate-pulse\"\r\n              style={{\r\n                background: \"linear-gradient(90deg, #06b6d4, #8b5cf6, #ec4899)\",\r\n                mask: \"linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0)\",\r\n                maskComposite: \"xor\",\r\n                padding: \"1px\",\r\n              }}\r\n            />\r\n\r\n            <div className=\"relative bg-black/90 dark:bg-black/95 rounded-2xl p-4\">\r\n              <div className=\"flex items-start gap-3\">\r\n                <div className=\"flex items-center justify-center w-8 h-8 bg-gradient-to-r from-cyan-500 to-purple-500 rounded-lg\">\r\n                  <Zap className=\"w-4 h-4 text-white\" />\r\n                </div>\r\n\r\n                <Textarea\r\n                  placeholder=\"Enter the matrix...\"\r\n                  className={cn(\r\n                    \"flex-1 bg-transparent border-none\",\r\n                    \"placeholder:text-cyan-400/70 dark:placeholder:text-cyan-400/70\",\r\n                    \"text-cyan-100 dark:text-cyan-100\",\r\n                    \"focus-visible:ring-0 focus-visible:ring-offset-0\",\r\n                    \"min-h-[58px] max-h-[200px] resize-none overflow-y-auto\",\r\n                    \"py-2 font-mono\",\r\n                  )}\r\n                  ref={textareaRef}\r\n                  value={inputValue}\r\n                  onChange={(e) => {\r\n                    setInputValue(e.target.value)\r\n                    adjustHeight()\r\n                  }}\r\n                  onKeyDown={(e) => {\r\n                    if (e.key === \"Enter\" && !e.shiftKey) {\r\n                      e.preventDefault()\r\n                      handleSubmit()\r\n                    }\r\n                  }}\r\n                />\r\n\r\n                <div className=\"flex items-center gap-2\">\r\n                  <button className=\"p-2 rounded-lg bg-cyan-500/20 hover:bg-cyan-500/30 transition-colors border border-cyan-500/30\">\r\n                    <Mic className=\"w-4 h-4 text-cyan-400\" />\r\n                  </button>\r\n\r\n                  <button\r\n                    onClick={handleSubmit}\r\n                    disabled={!inputValue.trim()}\r\n                    className={cn(\r\n                      \"p-2 rounded-lg transition-all border\",\r\n                      inputValue.trim()\r\n                        ? \"bg-gradient-to-r from-cyan-500 to-purple-500 text-white border-transparent shadow-lg shadow-cyan-500/25\"\r\n                        : \"bg-gray-800 text-gray-500 border-gray-700\",\r\n                    )}\r\n                  >\r\n                    <ArrowUp className=\"w-4 h-4\" />\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "path": "/components/componentcraftui/ai-input/ai-input-11.tsx",
      "target": "/components/componentcraft/ai-input-11.tsx"
    },
    {
      "type": "registry:hook",
      "content": "\r\nimport { useEffect, useRef, useCallback } from \"react\";\r\n\r\ninterface UseAutoResizeTextareaProps {\r\n    minHeight: number;\r\n    maxHeight?: number;\r\n}\r\n\r\nexport function useAutoResizeTextarea({\r\n    minHeight,\r\n    maxHeight,\r\n}: UseAutoResizeTextareaProps) {\r\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n    const adjustHeight = useCallback(\r\n        (reset?: boolean) => {\r\n            const textarea = textareaRef.current;\r\n            if (!textarea) return;\r\n\r\n            if (reset) {\r\n                textarea.style.height = `${minHeight}px`;\r\n                return;\r\n            }\r\n\r\n            // Temporarily shrink to get the right scrollHeight\r\n            textarea.style.height = `${minHeight}px`;\r\n\r\n            // Calculate new height\r\n            const newHeight = Math.max(\r\n                minHeight,\r\n                Math.min(\r\n                    textarea.scrollHeight,\r\n                    maxHeight ?? Number.POSITIVE_INFINITY\r\n                )\r\n            );\r\n\r\n            textarea.style.height = `${newHeight}px`;\r\n        },\r\n        [minHeight, maxHeight]\r\n    );\r\n\r\n    useEffect(() => {\r\n        // Set initial height\r\n        const textarea = textareaRef.current;\r\n        if (textarea) {\r\n            textarea.style.height = `${minHeight}px`;\r\n        }\r\n    }, [minHeight]);\r\n\r\n    // Adjust height on window resize\r\n    useEffect(() => {\r\n        const handleResize = () => adjustHeight();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, [adjustHeight]);\r\n\r\n    return { textareaRef, adjustHeight };\r\n}\r\n",
      "path": "/hooks/use-auto-resize-textarea.tsx",
      "target": "/hooks/use-auto-resize-textarea.tsx"
    },
    {
      "type": "registry:hook",
      "content": "import { useEffect, type RefObject } from \"react\";\n\nexport function useClickOutside(\n    ref: RefObject<HTMLElement>,\n    handler: () => void\n) {\n    useEffect(() => {\n        const handleClickOutside = (event: MouseEvent) => {\n            if (ref.current && !ref.current.contains(event.target as Node)) {\n                handler();\n            }\n        };\n\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () =>\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n    }, [ref, handler]);\n}\n",
      "path": "/hooks/use-click-outside.ts",
      "target": "/hooks/use-click-outside.ts"
    }
  ]
}