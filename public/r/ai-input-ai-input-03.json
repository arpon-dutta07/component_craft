{
  "name": "ai-input-ai-input-03",
  "type": "registry:component",
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\"\r\n\r\nimport { Send, Sparkles, Code, ImageIcon, Mic, X, ChevronDown, Bot } from \"lucide-react\"\r\nimport { useState } from \"react\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Textarea } from \"@/components/ui/textarea\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\"\r\n\r\nconst agents = [\r\n  {\r\n    id: \"creative\",\r\n    name: \"Creative Writer\",\r\n    icon: Sparkles,\r\n    color: \"bg-gradient-to-r from-purple-500 to-pink-500\",\r\n    description: \"Generate creative content and stories\",\r\n  },\r\n  {\r\n    id: \"developer\",\r\n    name: \"Code Assistant\",\r\n    icon: Code,\r\n    color: \"bg-gradient-to-r from-blue-500 to-cyan-500\",\r\n    description: \"Help with coding and technical tasks\",\r\n  },\r\n  {\r\n    id: \"analyst\",\r\n    name: \"Data Analyst\",\r\n    icon: ImageIcon,\r\n    color: \"bg-gradient-to-r from-green-500 to-emerald-500\",\r\n    description: \"Analyze data and create reports\",\r\n  },\r\n  {\r\n    id: \"designer\",\r\n    name: \"Visual Designer\",\r\n    icon: ImageIcon,\r\n    color: \"bg-gradient-to-r from-orange-500 to-red-500\",\r\n    description: \"Create and edit visual content\",\r\n  },\r\n]\r\n\r\nexport default function AIInput_03() {\r\n  const { textareaRef, adjustHeight } = useAutoResizeTextarea({\r\n    minHeight: 60,\r\n    maxHeight: 240,\r\n  })\r\n  const [inputValue, setInputValue] = useState(\"\")\r\n  const [selectedAgent, setSelectedAgent] = useState(agents[0])\r\n  const [showAgents, setShowAgents] = useState(false)\r\n  const [isRecording, setIsRecording] = useState(false)\r\n\r\n  const handleSubmit = () => {\r\n    if (!inputValue.trim()) return\r\n    console.log(\"Submitted to\", selectedAgent.name, \":\", inputValue)\r\n    setInputValue(\"\")\r\n    adjustHeight(true)\r\n  }\r\n\r\n  const toggleRecording = () => {\r\n    setIsRecording(!isRecording)\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-full max-w-3xl mx-auto p-6\">\r\n      {/* Agent Selector */}\r\n      <div className=\"mb-4\">\r\n        <div className=\"relative\">\r\n          <Button\r\n            variant=\"outline\"\r\n            onClick={() => setShowAgents(!showAgents)}\r\n            className=\"w-full justify-between h-12 px-4 border-2 border-dashed hover:border-solid transition-all duration-200\"\r\n          >\r\n            <div className=\"flex items-center gap-3\">\r\n              <div className={cn(\"w-8 h-8 rounded-lg flex items-center justify-center\", selectedAgent.color)}>\r\n                <selectedAgent.icon className=\"w-4 h-4 text-white\" />\r\n              </div>\r\n              <div className=\"text-left\">\r\n                <div className=\"font-medium text-sm\">{selectedAgent.name}</div>\r\n                <div className=\"text-xs text-muted-foreground\">{selectedAgent.description}</div>\r\n              </div>\r\n            </div>\r\n            <ChevronDown className={cn(\"w-4 h-4 transition-transform\", showAgents && \"rotate-180\")} />\r\n          </Button>\r\n\r\n          {showAgents && (\r\n            <div className=\"absolute top-full left-0 right-0 mt-2 bg-card border border-border rounded-xl shadow-lg z-10 overflow-hidden\">\r\n              {agents.map((agent) => (\r\n                <Button\r\n                  key={agent.id}\r\n                  variant=\"ghost\"\r\n                  onClick={() => {\r\n                    setSelectedAgent(agent)\r\n                    setShowAgents(false)\r\n                  }}\r\n                  className=\"w-full justify-start h-auto p-4 hover:bg-muted/50\"\r\n                >\r\n                  <div className=\"flex items-center gap-3\">\r\n                    <div className={cn(\"w-8 h-8 rounded-lg flex items-center justify-center\", agent.color)}>\r\n                      <agent.icon className=\"w-4 h-4 text-white\" />\r\n                    </div>\r\n                    <div className=\"text-left\">\r\n                      <div className=\"font-medium text-sm\">{agent.name}</div>\r\n                      <div className=\"text-xs text-muted-foreground\">{agent.description}</div>\r\n                    </div>\r\n                  </div>\r\n                </Button>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Input Container */}\r\n      <div className=\"relative\">\r\n        <div className=\"relative border-2 border-border rounded-2xl bg-card/50 backdrop-blur-sm shadow-lg hover:shadow-xl transition-all duration-300\">\r\n          {/* Agent Badge */}\r\n          <div className=\"absolute -top-3 left-4 z-10\">\r\n            <Badge variant=\"secondary\" className=\"bg-card border border-border shadow-sm\">\r\n              <Bot className=\"w-3 h-3 mr-1\" />\r\n              {selectedAgent.name}\r\n            </Badge>\r\n          </div>\r\n\r\n          <Textarea\r\n            ref={textareaRef}\r\n            placeholder={`Ask ${selectedAgent.name} anything...`}\r\n            className={cn(\r\n              \"border-0 bg-transparent resize-none\",\r\n              \"placeholder:text-muted-foreground/60\",\r\n              \"focus-visible:ring-0 focus-visible:ring-offset-0\",\r\n              \"px-6 py-6 pr-20\",\r\n              \"min-h-[60px] max-h-[240px]\",\r\n              \"text-sm leading-relaxed\",\r\n              \"pt-8\",\r\n            )}\r\n            value={inputValue}\r\n            onChange={(e) => {\r\n              setInputValue(e.target.value)\r\n              adjustHeight()\r\n            }}\r\n            onKeyDown={(e) => {\r\n              if (e.key === \"Enter\" && !e.shiftKey) {\r\n                e.preventDefault()\r\n                handleSubmit()\r\n              }\r\n            }}\r\n          />\r\n\r\n          {/* Action Buttons */}\r\n          <div className=\"absolute right-3 bottom-3 flex items-center gap-2\">\r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"sm\"\r\n              onClick={toggleRecording}\r\n              className={cn(\r\n                \"h-9 w-9 p-0 rounded-full transition-all duration-200\",\r\n                isRecording ? \"bg-red-500 hover:bg-red-600 text-white animate-pulse\" : \"hover:bg-muted/50\",\r\n              )}\r\n            >\r\n              {isRecording ? <X className=\"w-4 h-4\" /> : <Mic className=\"w-4 h-4 text-muted-foreground\" />}\r\n            </Button>\r\n\r\n            <Button\r\n              onClick={handleSubmit}\r\n              disabled={!inputValue.trim()}\r\n              size=\"sm\"\r\n              className={cn(\r\n                \"h-9 w-9 p-0 rounded-full transition-all duration-300\",\r\n                inputValue.trim()\r\n                  ? cn(\"text-white shadow-lg hover:shadow-xl\", selectedAgent.color)\r\n                  : \"bg-muted text-muted-foreground cursor-not-allowed\",\r\n              )}\r\n            >\r\n              <Send className=\"w-4 h-4\" />\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Status Bar */}\r\n        {(inputValue || isRecording) && (\r\n          <div className=\"mt-3 flex items-center justify-between text-xs text-muted-foreground\">\r\n            <div className=\"flex items-center gap-2\">\r\n              {isRecording && (\r\n                <div className=\"flex items-center gap-1\">\r\n                  <div className=\"w-2 h-2 bg-red-500 rounded-full animate-pulse\" />\r\n                  Recording...\r\n                </div>\r\n              )}\r\n            </div>\r\n            <div>{inputValue.length} / 2000</div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "path": "/components/componentcraftui/ai-input/ai-input-03.tsx",
      "target": "/components/componentcraft/ai-input-03.tsx"
    },
    {
      "type": "registry:hook",
      "content": "\r\nimport { useEffect, useRef, useCallback } from \"react\";\r\n\r\ninterface UseAutoResizeTextareaProps {\r\n    minHeight: number;\r\n    maxHeight?: number;\r\n}\r\n\r\nexport function useAutoResizeTextarea({\r\n    minHeight,\r\n    maxHeight,\r\n}: UseAutoResizeTextareaProps) {\r\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n    const adjustHeight = useCallback(\r\n        (reset?: boolean) => {\r\n            const textarea = textareaRef.current;\r\n            if (!textarea) return;\r\n\r\n            if (reset) {\r\n                textarea.style.height = `${minHeight}px`;\r\n                return;\r\n            }\r\n\r\n            // Temporarily shrink to get the right scrollHeight\r\n            textarea.style.height = `${minHeight}px`;\r\n\r\n            // Calculate new height\r\n            const newHeight = Math.max(\r\n                minHeight,\r\n                Math.min(\r\n                    textarea.scrollHeight,\r\n                    maxHeight ?? Number.POSITIVE_INFINITY\r\n                )\r\n            );\r\n\r\n            textarea.style.height = `${newHeight}px`;\r\n        },\r\n        [minHeight, maxHeight]\r\n    );\r\n\r\n    useEffect(() => {\r\n        // Set initial height\r\n        const textarea = textareaRef.current;\r\n        if (textarea) {\r\n            textarea.style.height = `${minHeight}px`;\r\n        }\r\n    }, [minHeight]);\r\n\r\n    // Adjust height on window resize\r\n    useEffect(() => {\r\n        const handleResize = () => adjustHeight();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, [adjustHeight]);\r\n\r\n    return { textareaRef, adjustHeight };\r\n}\r\n",
      "path": "/hooks/use-auto-resize-textarea.tsx",
      "target": "/hooks/use-auto-resize-textarea.tsx"
    },
    {
      "type": "registry:hook",
      "content": "\r\nimport { useEffect, useRef, useCallback } from \"react\";\r\n\r\ninterface UseAutoResizeTextareaProps {\r\n    minHeight: number;\r\n    maxHeight?: number;\r\n}\r\n\r\nexport function useAutoResizeTextarea({\r\n    minHeight,\r\n    maxHeight,\r\n}: UseAutoResizeTextareaProps) {\r\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n    const adjustHeight = useCallback(\r\n        (reset?: boolean) => {\r\n            const textarea = textareaRef.current;\r\n            if (!textarea) return;\r\n\r\n            if (reset) {\r\n                textarea.style.height = `${minHeight}px`;\r\n                return;\r\n            }\r\n\r\n            // Temporarily shrink to get the right scrollHeight\r\n            textarea.style.height = `${minHeight}px`;\r\n\r\n            // Calculate new height\r\n            const newHeight = Math.max(\r\n                minHeight,\r\n                Math.min(\r\n                    textarea.scrollHeight,\r\n                    maxHeight ?? Number.POSITIVE_INFINITY\r\n                )\r\n            );\r\n\r\n            textarea.style.height = `${newHeight}px`;\r\n        },\r\n        [minHeight, maxHeight]\r\n    );\r\n\r\n    useEffect(() => {\r\n        // Set initial height\r\n        const textarea = textareaRef.current;\r\n        if (textarea) {\r\n            textarea.style.height = `${minHeight}px`;\r\n        }\r\n    }, [minHeight]);\r\n\r\n    // Adjust height on window resize\r\n    useEffect(() => {\r\n        const handleResize = () => adjustHeight();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, [adjustHeight]);\r\n\r\n    return { textareaRef, adjustHeight };\r\n}\r\n",
      "path": "/hooks/use-auto-resize-textarea.tsx",
      "target": "/hooks/use-auto-resize-textarea.tsx"
    }
  ],
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "textarea",
    "select",
    "badge"
  ]
}