{
  "name": "particle-button",
  "type": "registry:component",
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { useState, useRef, type RefObject } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { motion, AnimatePresence } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\nimport { MousePointerClick, Check } from \"lucide-react\";\n\ntype ButtonProps = React.ComponentProps<typeof Button>;\n\ninterface ParticleButtonProps extends ButtonProps {\n  onSuccess?: () => void;\n  successDuration?: number;\n  particleCount?: number;\n  particleColors?: string[];\n}\n\nfunction SuccessParticles({\n  buttonRef,\n  particleCount = 6,\n  particleColors = [\"#000\", \"#fff\", \"#facc15\", \"#ef4444\", \"#3b82f6\"],\n}: {\n  buttonRef: React.RefObject<HTMLButtonElement>;\n  particleCount?: number;\n  particleColors?: string[];\n}) {\n  const rect = buttonRef.current?.getBoundingClientRect();\n  if (!rect) return null;\n\n  const centerX = rect.left + rect.width / 2;\n  const centerY = rect.top + rect.height / 2;\n\n  return (\n    <AnimatePresence>\n      {[...Array(particleCount)].map((_, i) => (\n        <motion.div\n          key={i}\n          className=\"fixed w-1.5 h-1.5 rounded-full\"\n          style={{\n            left: centerX,\n            top: centerY,\n            backgroundColor: particleColors[i % particleColors.length],\n          }}\n          initial={{\n            scale: 0,\n            x: 0,\n            y: 0,\n          }}\n          animate={{\n            scale: [0, 1, 0],\n            x: [0, (i % 2 ? 1 : -1) * (Math.random() * 60 + 30)],\n            y: [0, -Math.random() * 60 - 20],\n            opacity: [1, 1, 0],\n          }}\n          transition={{\n            duration: 0.7,\n            delay: i * 0.05,\n            ease: \"easeOut\",\n          }}\n        />\n      ))}\n    </AnimatePresence>\n  );\n}\n\nexport default function ParticleButton({\n  children,\n  onClick,\n  onSuccess,\n  successDuration = 1200,\n  particleCount = 6,\n  particleColors,\n  className,\n  ...props\n}: ParticleButtonProps) {\n  const [showParticles, setShowParticles] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const buttonRef = useRef<HTMLButtonElement>(null);\n\n  const handleClick = async (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (onClick) await onClick(e);\n\n    setShowParticles(true);\n\n    setTimeout(() => {\n      setShowParticles(false);\n      setIsSuccess(true);\n\n      if (onSuccess) onSuccess();\n\n      setTimeout(() => setIsSuccess(false), 1000);\n    }, successDuration);\n  };\n\n  return (\n    <>\n      {showParticles && (\n        <SuccessParticles\n          buttonRef={buttonRef as RefObject<HTMLButtonElement>}\n          particleCount={particleCount}\n          particleColors={particleColors}\n        />\n      )}\n      <Button\n        ref={buttonRef}\n        onClick={handleClick}\n        className={cn(\n          \"relative flex items-center gap-2 font-medium\",\n          showParticles && \"scale-95\",\n          \"transition-transform duration-150\",\n          className\n        )}\n        {...props}\n      >\n        {isSuccess ? (\n          <>\n            <Check className=\"h-4 w-4 text-green-500\" />\n            Success\n          </>\n        ) : (\n          <>\n            {children}\n            <MousePointerClick className=\"h-4 w-4\" />\n          </>\n        )}\n      </Button>\n    </>\n  );\n}\n",
      "path": "components/componentcraftui/particle-button.tsx",
      "target": "components/componentcraft/particle-button.tsx"
    }
  ],
  "category": "component",
  "description": "particle-button component"
}